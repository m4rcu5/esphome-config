---

substitutions:
  name: watermeter
  friendly_name: Watermeter

  # Multiplier as noted on the watermeter (x0.0001) x 10 for a full rotation
  pulse_multiplier: "0.001"

  # Time between writes to flash
  write_interval: 5min

packages:
  base:   !include common/base.yaml
  mqtt:   !include common/mqtt.yaml
  wifi:   !include common/wifi.yaml

esp8266:
  board: d1_mini

  # Enable restore from flash
  restore_from_flash: true

globals:
  # Store the lifetime total pulse count
  - id: total_pulses
    type: int
    restore_value: yes
    initial_value: "0"

# Limit the amount of writes to the flash
preferences:
  flash_write_interval: ${write_interval}

esphome:
  on_boot:
    # Restore the saved pulsecount to the running pulse_meter
    - pulse_meter.set_total_pulses:
        id: watermeter_flow # Needs to reference the parent sensor
        value: !lambda 'return id(total_pulses);'

# Enable the LED
status_led:
  pin:
    number: GPIO2
    inverted: true

# Allow setting of the total water usage via MQTT
mqtt:
  on_message:
    - topic: ${name}/set_water_usage
      then:
        - pulse_meter.set_total_pulses:
            id: watermeter_flow # Needs to reference the parent sensor
            value: !lambda 'return atof(x.c_str()) * ( 1.0 / ${pulse_multiplier} );'
        - logger.log:
            format: "The total pulse count has been set to: %d"
            args: [ 'id(total_pulses)' ]

sensor:
  # Measure the flow of water
  - platform: pulse_meter
    id: watermeter_flow

    internal_filter_mode: "PULSE"
    internal_filter: 50ms
    timeout: 120s

    pin:
      number: GPIO4
      mode: INPUT

    # Divide by the pulse multiplier, and convert m³ to liters
    filters:
      - multiply: ${pulse_multiplier}
      - multiply: 1000

    name: Watermeter Flow
    unit_of_measurement: "l/min"
    state_class: measurement
    accuracy_decimals: 1
    icon: "mdi:water-pump"

    # Keep a running total of used water
    total:
      id: watermeter_total
      filters:
        - multiply: ${pulse_multiplier}
      on_raw_value:
        # Write every increment to the global variable
        - lambda: id(total_pulses) = x;
      name: Watermeter Total
      state_class: total_increasing
      unit_of_measurement: "m³"
      accuracy_decimals: 3
      icon: "mdi:water"

